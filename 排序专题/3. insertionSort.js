/**
 * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
 *
 *
 * @param numbers int整型一维数组
 * @return int整型一维数组
 *
 * 插入排序
 * 在未排序区间选择一个基准元素，将该元素与其左侧已排序区间的元素逐一比较大小，并将该元素插入到正确的位置
 * 最差时间复杂度和平均时间复杂度O(n^2)，输入数组完全有序时，最佳时间复杂度O(n)，空间复杂度O(1)
 * 稳定排序：遇到相等元素不交换
 *
 * 在数据量较小的情况下，插入排序通常更快
 */

function insertionSort(nums) {
    // 外循环：已排序区间为 [0, i-1]
    for (let i = 1; i < nums.length; i++) {
        const base = nums[i]
        let j = i - 1
        // 内循环：将 base 插入到已排序区间 [0, i-1] 中的正确位置
        while (j >= 0 && nums[j] > base) {
            nums[j + 1] = nums[j] // 将 nums[j] 向右移动一位，因此将 nums[j] 的值复制到它右边的位置，就在左边腾出了一个"空位"（实际上是重复值，会被后续覆盖）
            j--
        }
        nums[j + 1] = base // 将 base 赋值到正确位置，当找到正确位置时，将 base 放入这个腾出的位置
    }
}
